{"version":3,"sources":["api/posts.js","components/PostsList/PostsList.jsx","components/NewCommentForm/NewCommentForm.jsx","api/comments.js","components/PostDetails/PostDetails.jsx","App.jsx","index.js"],"names":["BASE_URL","getUserPosts","a","fetch","response","json","result","data","getPostDetails","url","PostsList","userId","handleSelectedPost","selectedPostId","useState","posts","setPosts","useEffect","postsData","filter","post","fetchData","className","map","key","id","title","type","onClick","defaultProps","NewCommentForm","postId","newComment","body","name","email","inputs","setInputs","resetForm","useCallback","handleChange","event","target","value","currentInputsValues","handleSumbit","preventDefault","onSubmit","required","placeholder","onChange","getPostComments","deletePostComments","method","createPost","item","headers","JSON","stringify","PostDetails","postDetails","setPostDetails","postComments","setPostComments","isCommentVisible","setIsCommentVisible","commentId","setCommentId","postsDetailsData","postCommentsData","filteredPostComments","comment","deletePost","addNewComment","current","length","postComment","App","setUserId","setSelectedPostId","handlePosts","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cf8982e1.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate-api.herokuapp.com/posts/';\n\nexport async function getUserPosts() {\n  const response = await fetch(`${BASE_URL}`);\n\n  const result = await response.json();\n\n  return result.data;\n}\n\nexport async function getPostDetails(url) {\n  const response = await fetch(`${BASE_URL}${url}`);\n\n  const result = await response.json();\n\n  return result.data;\n}\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport './PostsList.scss';\nimport { getUserPosts } from '../../api/posts';\n\nexport const PostsList = ({\n  userId,\n  handleSelectedPost,\n  selectedPostId,\n}) => {\n  const [posts, setPosts] = useState();\n\n  useEffect(() => {\n    async function fetchData() {\n      const postsData = await getUserPosts();\n\n      if (userId > 0) {\n        setPosts(postsData.filter(post => +post.userId === +userId));\n      } else {\n        setPosts(postsData);\n      }\n    }\n\n    fetchData();\n  }, [userId]);\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {posts && posts.map(post => (\n          <li\n            className=\"PostsList__item\"\n            key={post.id}\n          >\n            <div>\n              <b>\n                {`[User: #${post.userId}] `}\n              </b>\n              {post.title}\n            </div>\n            {selectedPostId === post.id ? (\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={() => handleSelectedPost(0)}\n              >\n                Close\n              </button>\n            ) : (\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={() => handleSelectedPost(post.id)}\n              >\n                Open\n              </button>\n            )\n            }\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nPostsList.propTypes = {\n  userId: PropTypes.number,\n  handleSelectedPost: PropTypes.func.isRequired,\n  selectedPostId: PropTypes.number.isRequired,\n};\n\nPostsList.defaultProps = {\n  userId: 0,\n};\n","import React, { useState, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport './NewCommentForm.scss';\n\nexport const NewCommentForm = ({ postId, newComment }) => {\n  const [inputs, setInputs] = useState({\n    body: '',\n    name: '',\n    email: '',\n  });\n\n  const resetForm = useCallback(\n    () => {\n      setInputs({\n        body: '',\n        name: '',\n        email: '',\n      });\n    }, [],\n  );\n\n  const handleChange = useCallback(\n    (event) => {\n      const { name, value } = event.target;\n\n      setInputs(currentInputsValues => ({\n        ...currentInputsValues,\n        [name]: value,\n      }));\n    }, [],\n  );\n\n  const handleSumbit = useCallback(\n    (event) => {\n      event.preventDefault();\n      newComment({\n        ...inputs,\n        postId,\n      });\n\n      resetForm();\n    }, [inputs, postId, resetForm, newComment],\n  );\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={handleSumbit}\n    >\n      <div className=\"form-field\">\n        <input\n          required\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          onChange={handleChange}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          required\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          onChange={handleChange}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          required\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          onChange={handleChange}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n        required\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  postId: PropTypes.number.isRequired,\n  newComment: PropTypes.func.isRequired,\n};\n","const BASE_URL = 'https://mate-api.herokuapp.com/comments/';\n\nexport async function getPostComments() {\n  const response = await fetch(`${BASE_URL}`);\n\n  const result = await response.json();\n\n  return result.data;\n}\n\nexport async function deletePostComments(url) {\n  const response = await fetch(`${BASE_URL}${url}`, {\n    method: 'DELETE',\n  });\n\n  const result = response.json();\n\n  return result.data;\n}\n\nexport async function createPost(item) {\n  const response = await fetch(BASE_URL, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=utf-8',\n    },\n    body: JSON.stringify({\n      postId: item.postId,\n      name: item.name,\n      email: item.email,\n      body: item.body,\n    }),\n  });\n\n  const result = await response.json();\n\n  return result;\n}\n","import React, { useEffect, useState, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\nimport { getPostDetails } from '../../api/posts';\nimport {\n  getPostComments,\n  deletePostComments,\n  createPost,\n} from '../../api/comments';\n\nexport const PostDetails = ({ selectedPostId }) => {\n  const [postDetails, setPostDetails] = useState({});\n  const [postComments, setPostComments] = useState([]);\n  const [isCommentVisible, setIsCommentVisible] = useState(false);\n  const [commentId, setCommentId] = useState(0);\n\n  useEffect(() => {\n    async function fetchData() {\n      const postsDetailsData = await getPostDetails(selectedPostId);\n\n      const postCommentsData = await getPostComments(selectedPostId);\n\n      const filteredPostComments = postCommentsData.filter(comment => (\n        comment.postId === selectedPostId\n      ));\n\n      setPostDetails(postsDetailsData);\n      setPostComments(filteredPostComments);\n    }\n\n    fetchData();\n  }, [selectedPostId]);\n\n  const deletePost = useCallback(\n    async() => {\n      await deletePostComments(commentId);\n      const postCommentsData = await getPostComments(selectedPostId);\n\n      const filteredPostComments = postCommentsData.filter(comment => (\n        comment.postId === selectedPostId\n      ));\n\n      setPostComments(filteredPostComments);\n    },\n    [selectedPostId, commentId],\n  );\n\n  useEffect(() => {\n    deletePost();\n  }, [deletePost]);\n\n  function handleIsCommentVisible() {\n    setIsCommentVisible(current => !current);\n  }\n\n  const addNewComment = useCallback(\n    async(item) => {\n      await createPost({ ...item });\n      const postCommentsData = await getPostComments(selectedPostId);\n\n      const filteredPostComments = postCommentsData.filter(comment => (\n        comment.postId === selectedPostId\n      ));\n\n      setPostComments(filteredPostComments);\n    }, [selectedPostId],\n  );\n\n  useEffect(() => {\n    addNewComment();\n  }, [addNewComment]);\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{postDetails.title}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={handleIsCommentVisible}\n        >\n          {isCommentVisible\n            ? `Hide ${postComments.length} comments`\n            : `Show ${postComments.length} comments`\n            }\n        </button>\n        {isCommentVisible && (\n          <ul className=\"PostDetails__list\">\n            {postComments.map(postComment => (\n              <li className=\"PostDetails__list-item\" key={postComment.id}>\n                <button\n                  type=\"button\"\n                  className=\"PostDetails__remove-button button\"\n                  onClick={() => setCommentId(postComment.id)}\n                >\n                  X\n                </button>\n                <p>{postComment.body}</p>\n              </li>\n            ))}\n          </ul>\n        )}\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            postId={postDetails.id}\n            newComment={addNewComment}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n\nPostDetails.propTypes = {\n  selectedPostId: PropTypes.number.isRequired,\n};\n","import React, { useState, useCallback } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\n\nconst App = () => {\n  const [userId, setUserId] = useState(0);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n\n  const handlePosts = useCallback(\n    (event) => {\n      const { value } = event.target;\n\n      setUserId(value);\n    }, [],\n  );\n\n  const handleSelectedPost = useCallback((id) => {\n    setSelectedPostId(id);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select className=\"App__user-selector\" onChange={handlePosts}>\n            <option>All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            userId={userId}\n            handleSelectedPost={handleSelectedPost}\n            selectedPostId={selectedPostId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {selectedPostId > 0\n            && (\n            <PostDetails\n              selectedPostId={selectedPostId}\n            />\n            )\n          }\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}
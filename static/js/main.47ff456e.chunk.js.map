{"version":3,"sources":["api/posts.js","components/PostsList/PostsList.jsx","components/NewCommentForm/NewCommentForm.jsx","api/comments.js","components/PostDetails/PostDetails.jsx","App.jsx","index.js"],"names":["BASE_URL","getUserPosts","a","fetch","response","json","result","data","getPostDetails","url","PostsList","userId","handleSelectedPost","selectedPostId","useState","posts","setPosts","useEffect","postsData","filter","post","fetchData","className","map","key","id","title","type","onClick","defaultProps","NewCommentForm","postId","newComment","body","name","email","inputs","setInputs","handleChange","event","target","value","current","onSubmit","preventDefault","placeholder","onChange","getPostComments","deletePostComments","method","createPost","headers","JSON","stringify","PostDetails","postDetails","setPostDetails","postComments","setPostComments","isCommentVisible","setIsCommentVisible","commentId","setCommentId","item","postCommentsData","filteredPostComments","comment","postsDetailsData","deletePost","length","postComment","isRequired","App","setUserId","setSelectedPostId","useCallback","ReactDOM","render","document","getElementById"],"mappings":"6WAAaA,G,MAAW,yCAEjB,SAAeC,IAAtB,+B,4CAAO,8BAAAC,EAAA,sEACkBC,MAAM,GAAD,OAAIH,IAD3B,cACCI,EADD,gBAGgBA,EAASC,OAHzB,cAGCC,EAHD,yBAKEA,EAAOC,MALT,4C,sBAQA,SAAeC,EAAtB,kC,4CAAO,WAA8BC,GAA9B,iBAAAP,EAAA,sEACkBC,MAAM,GAAD,OAAIH,GAAJ,OAAeS,IADtC,cACCL,EADD,gBAGgBA,EAASC,OAHzB,cAGCC,EAHD,yBAKEA,EAAOC,MALT,4C,sBCLA,IAAMG,EAAY,SAAC,GAInB,IAHLC,EAGI,EAHJA,OACAC,EAEI,EAFJA,mBACAC,EACI,EADJA,eACI,EACsBC,qBADtB,mBACGC,EADH,KACUC,EADV,KAiBJ,OAdAC,qBAAU,WAAM,4CACd,4BAAAf,EAAA,sEAC0BD,IAD1B,OACQiB,EADR,OAIIF,EADEL,EAAS,EACFO,EAAUC,QAAO,SAAAC,GAAI,OAAKA,EAAKT,UAAYA,KAE3CO,GANb,4CADc,uBAAC,WAAD,wBAWdG,KACC,CAACV,IAGF,yBAAKW,UAAU,aACb,sCAEA,wBAAIA,UAAU,mBACXP,GAASA,EAAMQ,KAAI,SAAAH,GAAI,OACtB,wBACEE,UAAU,kBACVE,IAAKJ,EAAKK,IAEV,6BACE,6CACcL,EAAKT,OADnB,OAGCS,EAAKM,OAEPb,IAAmBO,EAAKK,GACvB,4BACEE,KAAK,SACLL,UAAU,2BACVM,QAAS,kBAAMhB,EAAmB,KAHpC,SAQA,4BACEe,KAAK,SACLL,UAAU,2BACVM,QAAS,kBAAMhB,EAAmBQ,EAAKK,MAHzC,eAsBdf,EAAUmB,aAAe,CACvBlB,OAAQ,G,kBCtEGmB,G,MAAiB,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,OAAQC,EAAiB,EAAjBA,WAAiB,EAC5BlB,mBAAS,CACnCmB,KAAM,GACNC,KAAM,GACNC,MAAO,KAJ+C,mBACjDC,EADiD,KACzCC,EADyC,KAOxD,SAASC,EAAaC,GAAQ,IAAD,EACHA,EAAMC,OAAtBN,EADmB,EACnBA,KAAMO,EADa,EACbA,MAEdJ,GAAU,SAAAK,GAAO,kCACZA,GADY,kBAEdR,EAAOO,OAmBZ,OACE,0BACEnB,UAAU,iBACVqB,SAlBJ,SAAsBJ,GACpBA,EAAMK,iBAENZ,EAAW,2BACNI,GADK,IAERL,YAGFM,EAAU,CACRJ,KAAM,GACNC,KAAM,GACNC,MAAO,OASP,yBAAKb,UAAU,cACb,2BACEK,KAAK,OACLO,KAAK,OACLW,YAAY,YACZvB,UAAU,wBACVwB,SAAUR,KAId,yBAAKhB,UAAU,cACb,2BACEK,KAAK,OACLO,KAAK,QACLW,YAAY,aACZvB,UAAU,wBACVwB,SAAUR,KAId,yBAAKhB,UAAU,cACb,8BACEY,KAAK,OACLW,YAAY,oBACZvB,UAAU,wBACVwB,SAAUR,KAId,4BACEX,KAAK,SACLL,UAAU,wCAFZ,oBCrEAtB,G,MAAW,4CAEV,SAAe+C,IAAtB,+B,4CAAO,8BAAA7C,EAAA,sEACkBC,MAAM,GAAD,OAAIH,IAD3B,cACCI,EADD,gBAGgBA,EAASC,OAHzB,cAGCC,EAHD,yBAKEA,EAAOC,MALT,4C,sBAQA,SAAeyC,EAAtB,kC,4CAAO,WAAkCvC,GAAlC,iBAAAP,EAAA,sEACkBC,MAAM,GAAD,OAAIH,GAAJ,OAAeS,GAAO,CAChDwC,OAAQ,WAFL,cACC7C,EADD,OAKCE,EAASF,EAASC,OALnB,kBAOEC,EAAOC,MAPT,4C,sBAUA,SAAe2C,EAAtB,wC,4CAAO,WAA0BhB,EAAMH,EAAQE,EAAME,GAA9C,iBAAAjC,EAAA,sEACkBC,MAAMH,EAAU,CACrCiD,OAAQ,OACRE,QAAS,CACP,eAAgB,mCAElBlB,KAAMmB,KAAKC,UAAU,CACnBtB,SACAG,OACAC,QACAF,WAVC,cACC7B,EADD,gBAcgBA,EAASC,OAdzB,cAcCC,EAdD,yBAgBEA,GAhBF,4C,sBCTA,IAAMgD,EAAc,SAAC,GAAwB,IAAtBzC,EAAqB,EAArBA,eAAqB,EACXC,mBAAS,IADE,mBAC1CyC,EAD0C,KAC7BC,EAD6B,OAET1C,mBAAS,IAFA,mBAE1C2C,EAF0C,KAE5BC,EAF4B,OAGD5C,oBAAS,GAHR,mBAG1C6C,EAH0C,KAGxBC,EAHwB,OAIf9C,mBAAS,GAJM,mBAI1C+C,EAJ0C,KAI/BC,EAJ+B,cAiDlC9B,EAjDkC,8EAiDjD,WAA0B+B,GAA1B,iBAAA7D,EAAA,sEACQgD,EAAWa,GADnB,uBAEiChB,EAAgBlC,GAFjD,OAEQmD,EAFR,OAIQC,EAAuBD,EAAiB7C,QAAO,SAAA+C,GAAO,OAC1DA,EAAQnC,SAAWlB,KAGrB6C,EAAgBO,GARlB,4CAjDiD,sBAgEjD,OA1DAhD,qBAAU,WAAM,4CACd,4BAAAf,EAAA,sEACiCM,EAAeK,GADhD,OACQsD,EADR,OAGEX,EAAeW,GAHjB,4CADc,uBAAC,WAAD,wBAOd9C,KACC,CAACwC,IAEJ5C,qBAAU,WAAM,4CACd,8BAAAf,EAAA,sEACiC6C,EAAgBlC,GADjD,OACQmD,EADR,OAGQC,EAAuBD,EAAiB7C,QAAO,SAAA+C,GAAO,OAC1DA,EAAQnC,SAAWlB,KAGrB6C,EAAgBO,GAPlB,4CADc,uBAAC,WAAD,wBAWd5C,KACC,CAACR,IAEJI,qBAAU,WAAM,4CACd,8BAAAf,EAAA,sEACQ8C,EAAmBa,GAD3B,uBAEiCd,EAAgBlC,GAFjD,OAEQmD,EAFR,OAIQC,EAAuBD,EAAiB7C,QAAO,SAAA+C,GAAO,OAC1DA,EAAQnC,SAAWlB,KAGrB6C,EAAgBO,GARlB,4CADc,uBAAC,WAAD,wBAYdG,KACC,CAACP,IAiBJ5C,qBAAU,WACRe,MACC,IAGD,yBAAKV,UAAU,eACb,6CAEA,6BAASA,UAAU,qBACjB,2BAAIiC,EAAY7B,QAGlB,6BAASJ,UAAU,yBACjB,4BACEK,KAAK,SACLL,UAAU,SACVM,QA/BR,WACEgC,GAAoB,SAAAlB,GAAO,OAAKA,OAgCzBiB,EAAgB,eACLF,EAAaY,OADR,4BAELZ,EAAaY,OAFR,cAKlBV,GACC,wBAAIrC,UAAU,qBACXmC,EAAalC,KAAI,SAAA+C,GAAW,OAC3B,wBAAIhD,UAAU,yBAAyBE,IAAK8C,EAAY7C,IACtD,4BACEE,KAAK,SACLL,UAAU,oCACVM,QAAS,kBAAMkC,EAAaQ,EAAY7C,MAH1C,KAOA,2BAAI6C,EAAYrC,YAO1B,iCACE,yBAAKX,UAAU,6BACb,kBAAC,EAAD,CACEiD,YAAU,EACVxC,OAAQwB,EAAY9B,GACpBO,WAAYA,QCpDTwC,EA3DH,WAAO,IAAD,EACY1D,mBAAS,GADrB,mBACTH,EADS,KACD8D,EADC,OAE4B3D,mBAAS,GAFrC,mBAETD,EAFS,KAEO6D,EAFP,KAUV9D,EAAqB+D,uBAAY,SAAClD,GACtCiD,EAAkBjD,KACjB,CAACZ,IAEJ,OACE,yBAAKS,UAAU,OACb,4BAAQA,UAAU,eAChB,qDAGE,4BAAQA,UAAU,qBAAqBwB,SAhB3B,SAACP,GAAW,IACtBE,EAAUF,EAAMC,OAAhBC,MAERgC,EAAUhC,KAcF,6CACA,4BAAQA,MAAM,KAAd,iBACA,4BAAQA,MAAM,KAAd,gBACA,4BAAQA,MAAM,KAAd,oBACA,4BAAQA,MAAM,KAAd,oBACA,4BAAQA,MAAM,KAAd,oBACA,4BAAQA,MAAM,KAAd,wBACA,4BAAQA,MAAM,KAAd,mBACA,4BAAQA,MAAM,KAAd,4BACA,4BAAQA,MAAM,KAAd,mBACA,4BAAQA,MAAM,MAAd,oBAKN,0BAAMnB,UAAU,aACd,yBAAKA,UAAU,gBACb,kBAAC,EAAD,CACEX,OAAQA,EACRC,mBAAoBA,EACpBC,eAAgBA,KAIpB,yBAAKS,UAAU,gBACZT,EAAiB,GAEhB,kBAAC,EAAD,CACEA,eAAgBA,QClD9B+D,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.47ff456e.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate-api.herokuapp.com/posts/';\n\nexport async function getUserPosts() {\n  const response = await fetch(`${BASE_URL}`);\n\n  const result = await response.json();\n\n  return result.data;\n}\n\nexport async function getPostDetails(url) {\n  const response = await fetch(`${BASE_URL}${url}`);\n\n  const result = await response.json();\n\n  return result.data;\n}\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport './PostsList.scss';\nimport { getUserPosts } from '../../api/posts';\n\nexport const PostsList = ({\n  userId,\n  handleSelectedPost,\n  selectedPostId,\n}) => {\n  const [posts, setPosts] = useState();\n\n  useEffect(() => {\n    async function fetchData() {\n      const postsData = await getUserPosts();\n\n      if (userId > 0) {\n        setPosts(postsData.filter(post => +post.userId === +userId));\n      } else {\n        setPosts(postsData);\n      }\n    }\n\n    fetchData();\n  }, [userId]);\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {posts && posts.map(post => (\n          <li\n            className=\"PostsList__item\"\n            key={post.id}\n          >\n            <div>\n              <b>\n                {`[User: #${post.userId}] `}\n              </b>\n              {post.title}\n            </div>\n            {selectedPostId === post.id ? (\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={() => handleSelectedPost(0)}\n              >\n                Close\n              </button>\n            ) : (\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={() => handleSelectedPost(post.id)}\n              >\n                Open\n              </button>\n            )\n            }\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nPostsList.propTypes = {\n  userId: PropTypes.number,\n  handleSelectedPost: PropTypes.func.isRequired,\n  selectedPostId: PropTypes.number.isRequired,\n};\n\nPostsList.defaultProps = {\n  userId: 0,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './NewCommentForm.scss';\n\nexport const NewCommentForm = ({ postId, newComment }) => {\n  const [inputs, setInputs] = useState({\n    body: '',\n    name: '',\n    email: '',\n  });\n\n  function handleChange(event) {\n    const { name, value } = event.target;\n\n    setInputs(current => ({\n      ...current,\n      [name]: value,\n    }));\n  }\n\n  function handleSumbit(event) {\n    event.preventDefault();\n\n    newComment({\n      ...inputs,\n      postId,\n    });\n\n    setInputs({\n      body: '',\n      name: '',\n      email: '',\n    });\n  }\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={handleSumbit}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          onChange={handleChange}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          onChange={handleChange}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          onChange={handleChange}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  postId: PropTypes.number.isRequired,\n  newComment: PropTypes.func.isRequired,\n};\n","const BASE_URL = 'https://mate-api.herokuapp.com/comments/';\n\nexport async function getPostComments() {\n  const response = await fetch(`${BASE_URL}`);\n\n  const result = await response.json();\n\n  return result.data;\n}\n\nexport async function deletePostComments(url) {\n  const response = await fetch(`${BASE_URL}${url}`, {\n    method: 'DELETE',\n  });\n\n  const result = response.json();\n\n  return result.data;\n}\n\nexport async function createPost(name, postId, body, email) {\n  const response = await fetch(BASE_URL, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=utf-8',\n    },\n    body: JSON.stringify({\n      postId,\n      name,\n      email,\n      body,\n    }),\n  });\n\n  const result = await response.json();\n\n  return result;\n}\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\nimport { getPostDetails } from '../../api/posts';\nimport {\n  getPostComments,\n  deletePostComments,\n  createPost,\n} from '../../api/comments';\n\nexport const PostDetails = ({ selectedPostId }) => {\n  const [postDetails, setPostDetails] = useState({});\n  const [postComments, setPostComments] = useState([]);\n  const [isCommentVisible, setIsCommentVisible] = useState(false);\n  const [commentId, setCommentId] = useState(0);\n\n  useEffect(() => {\n    async function fetchData() {\n      const postsDetailsData = await getPostDetails(selectedPostId);\n\n      setPostDetails(postsDetailsData);\n    }\n\n    fetchData();\n  }, [commentId]);\n\n  useEffect(() => {\n    async function fetchData() {\n      const postCommentsData = await getPostComments(selectedPostId);\n\n      const filteredPostComments = postCommentsData.filter(comment => (\n        comment.postId === selectedPostId\n      ));\n\n      setPostComments(filteredPostComments);\n    }\n\n    fetchData();\n  }, [selectedPostId]);\n\n  useEffect(() => {\n    async function deletePost() {\n      await deletePostComments(commentId);\n      const postCommentsData = await getPostComments(selectedPostId);\n\n      const filteredPostComments = postCommentsData.filter(comment => (\n        comment.postId === selectedPostId\n      ));\n\n      setPostComments(filteredPostComments);\n    }\n\n    deletePost();\n  }, [commentId]);\n\n  function handleIsCommentVisible() {\n    setIsCommentVisible(current => !current);\n  }\n\n  async function newComment(item) {\n    await createPost(item);\n    const postCommentsData = await getPostComments(selectedPostId);\n\n    const filteredPostComments = postCommentsData.filter(comment => (\n      comment.postId === selectedPostId\n    ));\n\n    setPostComments(filteredPostComments);\n  }\n\n  useEffect(() => {\n    newComment();\n  }, []);\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{postDetails.title}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={handleIsCommentVisible}\n        >\n          {isCommentVisible\n            ? `Hide ${postComments.length} comments`\n            : `Show ${postComments.length} comments`\n            }\n        </button>\n        {isCommentVisible && (\n          <ul className=\"PostDetails__list\">\n            {postComments.map(postComment => (\n              <li className=\"PostDetails__list-item\" key={postComment.id}>\n                <button\n                  type=\"button\"\n                  className=\"PostDetails__remove-button button\"\n                  onClick={() => setCommentId(postComment.id)}\n                >\n                  X\n                </button>\n                <p>{postComment.body}</p>\n              </li>\n            ))}\n          </ul>\n        )}\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            isRequired\n            postId={postDetails.id}\n            newComment={newComment}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n\nPostDetails.propTypes = {\n  selectedPostId: PropTypes.number.isRequired,\n};\n","import React, { useState, useCallback } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\n\nconst App = () => {\n  const [userId, setUserId] = useState(0);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n\n  const handlePosts = (event) => {\n    const { value } = event.target;\n\n    setUserId(value);\n  };\n\n  const handleSelectedPost = useCallback((id) => {\n    setSelectedPostId(id);\n  }, [selectedPostId]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select className=\"App__user-selector\" onChange={handlePosts}>\n            <option>All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            userId={userId}\n            handleSelectedPost={handleSelectedPost}\n            selectedPostId={selectedPostId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {selectedPostId > 0\n            && (\n            <PostDetails\n              selectedPostId={selectedPostId}\n            />\n            )\n          }\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}